"출력형식 >" 아래 내용에 맞춰서 화면에 그대로 표시되면 돼요!
입력과 출력에 대해서는 강의에서 초반에 다루지 않는거 같으니 미리 Example class에 예시를 입력해놓았어요!
 
- Scanner 클래스
Scanner 클래스를 통해 만든 변수 sc의 
nextLine() --> 문자열 입력 후 엔터를 입력 가능, 
next() --> 문자열 입력 후 엔터 또한 새로운 입력으로서 받아들임,
nextInt() --> 숫자 입력 후 엔터 또한 새로운 입력으로서 받아들임
등의 메소드를 이용해 다양한 값을 입력받을 수 있어요!

- Integer.parseInt(숫자 형태의 문자열) ex> "1" != 1
Scanner 클래스의 nextInt()가 문제 해결 시 오류를 발생시킬 소지가 있어서 
nextLine()으로 받은 문자열을 숫자로 형변환시켜주는 역할을 해요!
예를 들어, Integer.parseInt("123")은 숫자 123으로 변환돼요. 문자열 "123"과 숫자 123은 다른 값이에요.
하지만 ( Integer.parseInt("123") == 123 )은 성립된답니다 ㅎㅅㅎ


>> 중요한 팁
- Naming Convention
각 회사마다 기본적인 이름 규칙을 정해놔요! 프로젝트 단위로도 이름 규칙을 정하기도 하고 그래요ㅎㅎ
여기에도 국제적으로 사용하는 가장 보편적인 네이밍 컨벤션이 존재하는데,

1. 클래스
클래스 명을 정할 때는,
첫 글자를 무조건 대문자로, 각 어절의 첫 글자 또한 대문자로 설정해요.
예를 들어, recipe keyword controller라는 이름의 클래스를 만든다면
RecipeKeywordController 가 돼요!

2. 메소드, 변수
메소드, 변수 명은 클래스와 비슷한데 딱 하나가 달라요!
첫 글자는 소문자로, 각 어절의 첫 글자는 대문자로 설정해요.
예를 들어, insert scrapbook content by no라는 이름으로 메소드를 만든다면
insertScrapbookContentByNo 가 돼요!

3. 상수(static variable) - 항상 말이 애매한데.. 상수형 변수타입(말이 안되긴하지만), 상수타입, 상수, static 변수라고 이야기하기도 해요
모든 글자를 대문자로, 각 어절 단위 사이에 공백을 _(언더바)로 표현해요!
예를 들어, count for exception 이라는 이름으로 상수타입을 만든다면
COUNT_FOR_EXCEPTION 이 돼요!

네이밍 컨벤션에 익숙해지는게 중요한 이유는,
1. 여러 사람이 함께 진행하는 프로젝트에서 변수 혹은 클래스 혹은 메소드의 이름을 쉽게 파악해 찾을 수 있도록 함,
2. 코드 리뷰 시 오해를 불러일으킬 소지를 최소화함,
3. 내장 함수나 오픈 소스를 복사해서 사용할 때 어떤건 변수이고 어떤건 메소드이고 어떤건 클래스이고를 잘 구분하기 위해서에요!
Integer.parseInt()
--> Integer는 이름만 봐도 클래스임을 알 수 있고 parseInt는 변수 혹은 메소드인데 뒤에 파라미터 ()가 붙음으로서 메소드임을 파악할 수 있는거죠!
나중에 되면 당연하게 느껴질 것들이지만 처음에는 중요하기 때문에 미리 적어놨어요ㅎㅅㅎ

뽜이팅!!